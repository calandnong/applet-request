import{_ as e,o as a,c as t,R as i}from"./chunks/framework.HseUURnm.js";const q=JSON.parse('{"title":"什么是AppletRequest？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduce/what-is-applet-request.md","filePath":"guide/introduce/what-is-applet-request.md"}'),l={name:"guide/introduce/what-is-applet-request.md"},p=i('<h1 id="什么是appletrequest" tabindex="-1">什么是AppletRequest？ <a class="header-anchor" href="#什么是appletrequest" aria-label="Permalink to &quot;什么是AppletRequest？&quot;">​</a></h1><p>applet-request 是一套小程序框架下的请求解决方案。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>applet-request 是一套小程序框架下的请求解决方案。</p><p>它包含了一些针对不同请求api的封装的请求库，并为这些请求库提供了一致的中间件、拦截器、全局配置等功能的体验。</p><p>当这些功能不满足你的需求、或者你想定制化时，也可以基于 @applet-request/core 快速封装一个实现你需求的请求库。</p><h2 id="功能支持" tabindex="-1">功能支持 <a class="header-anchor" href="#功能支持" aria-label="Permalink to &quot;功能支持&quot;">​</a></h2><ul><li>基于 Promise 对象实现，支持请求和响应拦截</li><li>支持多个全局配置实例</li><li>支持文件上传/下载</li><li>支持自定义参数</li><li>支持自定义请求适配器</li><li>支持多拦截器</li><li>支持请求取消</li><li><code>Typescript</code> 支持</li><li>洋葱机制的 <code>use</code> 中间件机制支持</li><li><code>timeout</code> 支持</li><li>统一的<code>错误处理</code>方式</li></ul><p>它包含了一些针对不同请求api的封装的请求库，并为这些请求库提供了一致的中间件、拦截器、全局配置等功能的体验。</p><h2 id="设计目标" tabindex="-1">设计目标 <a class="header-anchor" href="#设计目标" aria-label="Permalink to &quot;设计目标&quot;">​</a></h2><p>1、提供原生小程序场景以及uniapp场景下的多种请求api的统一使用封装，核心逻辑内容抽离为request-core做到与单一api无关，并提供拦截器、自定义全局配置、url参数对象、请求取消等能力。</p><p>2、提供请求底层的抽象适配类，并提供常用api的实现，如：uni.request、uni.downloadFile、uni.uploadFile、wx.request、wx.downloadFile、wx.uploadFile的实现，如果后续有更多其他的api需要接入，则可第三方人员开发对应的adaptor即可。</p>',12),o=[p];function r(s,d,u,c,n,h){return a(),t("div",null,o)}const m=e(l,[["render",r]]);export{q as __pageData,m as default};
